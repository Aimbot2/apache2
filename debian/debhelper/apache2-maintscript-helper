# apache2-maintscript-helper - Apache2 helper function for maintainer scripts
# Copyright (C) 2012 Arno TÃ¶ll <debian@toell.net>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

#XXX: Remove me later
# set -x

if [ -n "${EXPORT_APACHE2_MAINTSCRIPT_HELPER:-}" ] ; then
	return
else
	EXPORT_APACHE2_MAINTSCRIPT_HELPER=1

	if [ -z "$1" ] ; then
		echo "You must invoke apache2-maintscript-helper with an nmodified environment when sourcing it"
		return 1
	fi

	APACHE2_MAINTSCRIPT_NAME="$0"
	APACHE2_MAINTSCRIPT_NAME=$(echo "$APACHE2_MAINTSCRIPT_NAME" | sed -re 's#^.*?\.(\w+)#\1#'  )
	case "$APACHE2_MAINTSCRIPT_NAME" in
		preinst|prerm|postrm|postinst)
			# yay - recognized script
		;;
		*)
			echo "Invoked from an unrecognized maintainer script: exiting"
			return 1
		;;
	esac

	APACHE2_MAINTSCRIPT_PACKAGE="$0"
	APACHE2_MAINTSCRIPT_PACKAGE=$(echo "$APACHE2_MAINTSCRIPT_PACKAGE" | sed -re 's#^.+/(.*)\.\w+$#\1#'  )

	APACHE2_MAINTSCRIPT_METHOD="$1"
	APACHE2_MAINTSCRIPT_ARGUMENT="$2"

fi



#### XXX: TODOS:

# Moreover it needs to remember if a module/web app was disabled (or enabled) by
# a maintainer script or by the user. Again, from our discussion:
# The rembering could be done like:
# touch /var/lib/apache2/modules_disabled_by_maintscript/$module
# purge should then do
# rm -f /var/lib/apache2/modules_disabled_by_maintscript/$module
# in addition.
#
# And even more work:
# - change the API of apache2_invoke to be more easily extensible (maybe only one
#   module/conf per invocation, this would allow adding optional parameters later)
# - change dh_apache2 accordingly (which is not that trivial as there is no easy
#   way to source script fragments in autoscripts)




#
# Function apache2_msg
#	print out a warning to both, the syslog and a local standard output.
#	This function should generally be used to display messages related to
#	the web server in maintainer scripts.
# Parameters:
#	priority
#		The message priority. Recognized values are the same as defined
#		by syslog(3), thus: one among debug, info, notice, warning,
#		err, crit, alert, emerg.
#		If no known priority is recognized, the priority is set to
#		"warning".
#	message
#		The message as a string. It is printed out verbatim.
# Behavior:
#	No message is displayed if APACHE2_MAINTSCRIPT_HELPER_QUIET is defined
# Returns:
#	this function always returns 0
# Since: 2.4.1-3
apache2_msg()
{
	local PRIORITY="$1"
	local MSG="$2"
	[ -z "$APACHE2_MAINTSCRIPT_HELPER_QUIET" ] && echo "$MSG"
	[ -x /usr/bin/logger ] || return 0
	case "$PRIORITY" in
		debug|info|notice|warning|err|crit|alert|emerg)
		;;
		*)
			PRIORITY="warning"
		;;
	esac
	local LOGGER="/usr/bin/logger -p daemon.$PRIORITY -t $APACHE2_MAINTSCRIPT_PACKAGE "
	$LOGGER "$MSG" || return 0
}

#
# Function apache2_is_upgrade
# 	succeeds if the package invoking the maintscript helper
# 	is being upgraded. This is useful to find out whether the maintainer
# 	script logic was already invoked once.
# Parameters:
#	none
# Returns:
#	0 if an older version of the maintainer script invoking the helper is
#	already installed
#	1 otherwise
# Since: 2.4.1-3
apache2_is_upgrade()
{

	# For postinst scripts we're upgrading if we're invoked in "postins configure <most recently installed version>"
	if [ -n "$APACHE2_MAINTSCRIPT_NAME" ] && [ "$APACHE2_MAINTSCRIPT_NAME" = 'postinst' ] ; then
		case "$APACHE2_MAINTSCRIPT_METHOD" in
			configure)
				if [ -n "$APACHE2_MAINTSCRIPT_ARGUMENT" ] ; then
					return 0
				fi

				return 1
				;;
			*)
				return 1
				;;
		esac
	fi

	# For preinst scripts we're upgrading if we're invoked as "preinst install|upgrade <most recently installed version>"
	if [ -n "$APACHE2_MAINTSCRIPT_NAME" ] && [ "$APACHE2_MAINTSCRIPT_NAME" = 'preinst' ] ; then
		case "$APACHE2_MAINTSCRIPT_METHOD" in
			install|upgrade)
				if [ -n "$APACHE2_MAINTSCRIPT_ARGUMENT" ] ; then
					return 0
				fi

				return 1
				;;
			*)
				return 1
				;;
		esac
	fi

	return 1
}

#
# Function apache2_is_fresh_installation
# 	succeeds if the package invoking the maintscript helper
# 	is being newly installed. This is useful to find out whether the maintainer
# 	script logic was already invoked once.
# Parameters:
#	none
# Returns:
#	0 if no older version of the package was previously installed
#	1 otherwise
# Since: 2.4.1-3
apache2_is_fresh_installation()
{
	if apache2_is_upgrade ; then
		return 1
	fi
	return 0
}

#
# Function apache2_has_module
# 	checks whether a supplied module is enabled in the current Apache server
# 	configuration
# Parameters:
#	module - the module name which should be checked. Can be a regular
#		string or a Perl compatible regular expression e.g. cgi(d|)
# Returns:
#	0 if the module(s) was/were found
#	1 otherwise
# Since: 2.4.1-1
apache2_has_module()
{
	[ -x /usr/sbin/a2query ] || return 1
	local MODULE="$1"
	if a2query -m $MODULE > /dev/null ; then
		return 0
	fi

	return 1
}

#
# Function apache2_switch_mpm
#	switches the MPM enabled on the web server. This function switches the
#	MPM unconditionally but does careful checks to make sure the web server
#	is left back with a working MPM.
#	It checks whether the supplied MPM exists and enables it on purpose.
# Parameters:
#	mpm - change the MPM to the supplied argument. It should be given
#	without "mpm_" prefix, e.g. "worker", "prefork", and so on.
# Returns:
#	0 if the MPM could be changed
#	1 otherwise
# Since: 2.4.1-1
apache2_switch_mpm()
{
	[ -x /usr/sbin/a2query ] || return 1
	[ -x /usr/sbin/a2dismod ] || return 1
	[ -x /usr/sbin/a2enmod ] || return 1

	if apache2_is_upgrade ; then
		return 0
	fi

	local MPM="$1"
	MPM=$(echo "$MPM" | sed -e 's/^mpm_//')

	if [ ! -e "/etc/apache2/mods-available/mpm_$MPM.load" ] ; then
		apache2_msg "err" "apache2_switch_mpm: MPM $MPM not found"
		return 1
	fi

	local CUR_MPM=$(a2query -M) || return 1

	if [ $CUR_MPM != $MPM ] ; then
		a2dismod -q "mpm_$CUR_MPM";
		a2enmod -q "mpm_$MPM";
	fi

	if ! apache2_has_module "mpm_$MPM" ; then
		# rollback
		a2enmod -q "mpm_$CUR_MPM"
		return 1
	fi

}

#
# Function apache2_invoke
#	invokes an Apache 2 configuration helper to enable or disable a
#	particular piece of configuration, a site or a module. It carefully
#	checks whether the supplied configuration snippet exists and reloads the
#	web server if the site administrator desires that by calling the
#	apache2_reload function.
# Parameters:
#	command - The command to invoke. Recognized commands are "enconf",
#		"enmod", "ensite", "disconf", "dismod", "dissite"
#	arguments - A variable number or arguments (e.g. modules) which shall be
#		enabled or disabled respectively. Do not enable module
#		dependencies that way, instead use module dependencies as
#		documented in </usr/share/doc/apache2/PACKAGING>.
# Returns:
#	0 if the changes could be activated
#	1 otherwise
# Since: 2.4.1-1
apache2_invoke()
{
	local CMD=$1
	shift
	local invoke_rcd=0
	local check_switch=""
	local invoke_string=""

	[ -x "/usr/sbin/a2$CMD" ] || return 1
	[ -x "/usr/sbin/a2query" ] || return 1

	if apache2_is_upgrade && [ $APACHE2_MAINTSCRIPT_NAME = 'postinst' ] ; then
		apache2_msg "info" "apache2_invoke: Doing nothing upon upgrade"
		return 0
	fi

	case "$CMD" in
		*conf)
			check_switch="-c"
			invoke_string="configuration"
			;;
		*mod)
			check_switch="-m"
			invoke_string="module"
			;;
		*site)
			check_switch="-s"
			invoke_string="site"
			;;
		*)
			;;
	esac

	for CONF in $@ ; do
		case "$CMD" in
			enconf|enmod|ensite)
				if a2query $check_switch $CONF > /dev/null 2>&1 ; then
					continue
				fi
				invoke_rcd=1
				a2$CMD -q "$CONF" > /dev/null 2>&1 || return 1
				apache2_msg "info" "apache2_invoke: Enable $invoke_string $CONF"
				;;
			disconf|dismod|dissite)
				if a2query $check_switch $CONF > /dev/null 2>&1 ; then
					invoke_rcd=1
					a2$CMD -q "$CONF" > /dev/null 2>&1 || return 1
					apache2_msg "info" "apache2_invoke: Disable $invoke_string $CONF"
				else
					continue
				fi
				;;
			*)
				return 1
				;;
		esac
	done

	if [ $invoke_rcd -eq 1 ] ; then
		apache2_reload
	fi

}

#
# Function apache2_reload
#	reloads the web server to activate a changed configuration. It does not
#	actually reload the web server if the current configuration fails to
#	parse.
# Parameters:
#	This function does not take any arguments
# Returns:
#	0 if the changes could be activated
#	1 otherwise
# Since: 2.4.1-1
apache2_reload()
{
	if apache2ctl configtest 2>/dev/null; then
		invoke-rc.d apache2 force-reload || true
	else
		apache2_msg "err" "apache2_reload: Your configuration is broken. Not restarting Apache 2"
	fi
}
